schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Subscription {
  typingIndicator: Boolean @aws_subscribe(mutations: ["typingIndicator"])
  newMessage: Message @aws_subscribe(mutations: ["sendMessage"])
}

type Mutation {
  createUserAccount(input: UserInput!): User! @aws_cognito_user_pools
  updateUserAccount(input: UpdateUserInput!): User! @aws_cognito_user_pools

  createGroup(input: GroupInput!): Group! @aws_cognito_user_pools
  addUserToGroup(userId: String!, groupId: String!): Boolean!
    @aws_cognito_user_pools
  sendMessage(input: MessageInput!): Message! @aws_cognito_user_pools

  typingIndicator(
    userId: String!
    groupId: String!
    typing: Boolean!
  ): Boolean! @aws_cognito_user_pools
}

type Query {
  getAllGroupsCreatedByUser(userId: String!): [Group!]! @aws_cognito_user_pools
  getAllMessagesPerGroup(groupId: String!): [Message!]! @aws_cognito_user_pools
}

type User @aws_cognito_user_pools {
  id: ID!
  username: String!
  email: String!
  profilePicUrl: String!
  updatedOn: AWSDateTime
  createdOn: AWSDateTime!
}

input UserInput @aws_cognito_user_pools {
  username: String!
  email: String!
  profilePicUrl: String!
}

input UpdateUserInput @aws_cognito_user_pools {
  id: ID!
  username: String!
  profilePicUrl: String!
}

type Message @aws_cognito_user_pools {
  id: ID!
  userId: String!
  user: User
  groupId: String!
  messageText: String!
  createdOn: AWSTimestamp!
}

input MessageInput @aws_cognito_user_pools {
  userId: String!
  groupId: String!
  messageText: String!
}

type Group @aws_cognito_user_pools {
  id: ID!
  userId: String!
  name: String!
  description: String!
  createdOn: AWSTimestamp!
}

input GroupInput {
  userId: String!
  name: String!
  description: String!
}
